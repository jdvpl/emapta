generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                   Int                 @id @default(autoincrement())
  name                 String              @map("PATIENT_IDENT_NAME")
  gender               String              @map("GENDER_OF_PATIENT")
  dob                  DateTime            @map("DATE_OF_BIRTH_PATIENT")
  address             String               @map("PATIENT_LOCATION_ADDRESS")
  phone               String               @map("TELEPHONE_NUMBER_PATIENT")
  email               String               @map("PATIENT_EMAIL_ID") @unique
  emergencyContacts    Contact[]
  insurance           Insurance[]
  medicalHistories    MedicalHistory[]
  allergies           Allergy[]
  medications         Medication[]
  socialHistory       SocialHistory[]
  familyHistory       String               @map("HISTORY_FAMILY_PATIENT")
  primaryCarePhysician String              @map("PRIMARY_CARE_DOCTOR_PATIENT")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  appointments        Appointment[]

  @@index([name]) 
  @@index([phone]) 
}

model Contact {
  id           Int       @id @default(autoincrement())
  name         String
  phoneNumber  String
  relationship String
  patientId    Int
  patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([phoneNumber])
}

model Insurance {
  id                   Int       @id @default(autoincrement())
  provider             String
  policyNumber        String
  patientId           Int
  patient             Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())

  @@index([policyNumber])
}

model MedicalHistory {
  id               Int       @id @default(autoincrement())
  history          String
  diagnosisDate    DateTime
  patientId        Int
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())

  @@index([diagnosisDate])
}

model Allergy {
  id               Int       @id @default(autoincrement())
  allergyName      String
  severity         String
  patientId        Int
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())

  @@index([allergyName])
}

model Medication {
  id               Int       @id @default(autoincrement())
  medicationName   String
  dosage           String
  patientId        Int
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())

  @@index([medicationName])
}

model SocialHistory {
  id               Int       @id @default(autoincrement())
  history          String
  patientId        Int
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())

  @@index([history])
}

model Appointment {
  id               Int       @id @default(autoincrement())
  date             DateTime
  reason           String
  patientId        Int
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())

  @@index([date]) 
}
